import{createRequire as b} from"node:module";var I=Object.create;var{defineProperty:M,getPrototypeOf:P,getOwnPropertyNames:k}=Object;var w=Object.prototype.hasOwnProperty;var A=(K,B,d)=>{d=K!=null?I(P(K)):{};const F=B||!K||!K.__esModule?M(d,"default",{value:K,enumerable:!0}):d;for(let C of k(K))if(!w.call(F,C))M(F,C,{get:()=>K[C],enumerable:!0});return F};var z=(K,B)=>()=>(B||K((B={exports:{}}).exports,B),B.exports);var h=b(import.meta.url);var Q=z((f,O)=>{var N=function(){};N.prototype.authenticate=function(K,B){throw new Error("Strategy#authenticate must be overridden by subclass")};O.exports=N});var V=z((D,U)=>{var R=Q();D=U.exports=R;D.Strategy=R});var Y=z((E,X)=>{var G=function(K){if(!K)throw new TypeError("CustomStrategy requires a verify callback");W.Strategy.call(this),this.name="custom",this._verify=K},W=V(),j=h("util");j.inherits(G,W.Strategy);G.prototype.authenticate=function(K){var B=this;function d(F,C,L){if(F)return B.error(F);if(!C)return B.fail(L);B.success(C,L)}try{this._verify(K,d)}catch(F){return B.error(F)}};X.exports=G});var $=z((J,_)=>{var Z=Y();J=_.exports=Z;J.Strategy=Z});var n=A($(),1),v=function(K){return K.findBy=K.findBy??"publicKey",K.from=K.from??"headers",(B,d)=>{let F;if(K.from==="body")F=B.body.publicKey;else F=B.headers.get(K.findBy);return F}};class H extends n.Strategy{constructor(K){super(v(K))}}export{H as Strategy};
